services:
  db:
    image: postgres:15.4
    restart: always
    shm_size: '256mb'
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # In local dev, you may expose the port:
    # ports:
    #   - "5432:5432"

  redis:
    image: redis:7.2.0
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    command: gunicorn foodie.wsgi:application --bind 0.0.0.0:8000
    env_file:
      - .env
    environment:
    - DATABASE_HOST=${DATABASE_HOST}
    - DATABASE_PORT=${DATABASE_PORT}
    - REDIS_HOST=${REDIS_HOST}
    - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
    - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      # Consider adding DJANGO_SECRET_KEY in .env for production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "8000"
    healthcheck:
      # Requires a /health endpoint in your Django app
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./web:/code
      - static_volume:/code/static
      - ./web/logs:/code/logs

  nginx:
    image: nginx:1.24.0
    restart: always
    ports:
      - "80:80"
      - "443:443" # Expose HTTPS port
    volumes:
      - ./nginx/sites-enabled/foodie:/etc/nginx/conf.d/default.conf:ro
      - ./web/staticfiles:/code/staticfiles:ro
      - ./web/mediafiles:/code/mediafiles:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health.html"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.47.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command: --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - web
    # doesnt have curl for health check; check manually

  prometheus-proxy:
    build:
      context: ./prometheus/nginx-prometheus
      dockerfile: Dockerfile
    depends_on:
      - prometheus
    ports:
      - "8081:8080"

  grafana:
    image: grafana/grafana:10.2.0
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    ports:
      - "3000:3000"
    # In production, secure Grafana with proper auth.
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - db
    environment:
      ADMINER_DEFAULT_SERVER: db
    # Adminer will let you connect with POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB
    # System: PostgreSQL
    # Server: db

volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
    